from prompt_generator import *

#Run the generator
window.mainloop()
import tkinter as tk
from tkinter import ttk
import json
import random
from PIL import ImageTk, Image



def generate_prompt():
    generated_prompt = []
    for category, dropdown in choices.items():
        choice = dropdown.get()
        selected_choice = choice
        prompt_part = generate_category_prompt(category, selected_choice)
        if prompt_part:
            generated_prompt.append(prompt_part)
            result_text.set(", ".join(generated_prompt) + ", (((PA7_Human-Likeness)))") or "Genrated prompt is empty"

            update_result_text()

def generate_category_prompt(category, choice):
    if choice == 'random':
        return random.choice(categories[category]['random'])
    elif choice == 'none':
        return None
    else:
        return choice

def copy_to_clipboard():
    generated_text = result_text.get()
    window.clipboard_clear()
    window.clipboard_append(generated_text)
    window.update()

def update_result_text():
    result_text_widget.config(state=tk.NORMAL)
    result_text_widget.delete(1.0, tk.END)
    result_text_widget.insert(tk.END, result_text.get())
    result_text_widget.config(state=tk.DISABLED)

# Load categories from the JSON file
with open('Assets/categories.json', 'r') as file:
    categories = json.load(file)

#Create GUI
window = tk.Tk()
window.title("PA7_PromptGenerator_Beta_v60")
window.iconbitmap('Assets/logo_PA7.ico')
window.geometry("1024x720")
window.resizable(
    width=False,
    height=False
    )
window.config(background='gray6'
    )

#Interface colors
col1='gray10'
col2='red2'
col3='floral white'
col4='white'
col5='lawn green'
col6='gray6'


logo_img = ImageTk.PhotoImage(Image.open('Assets/logo_PA7.ico'))
logo_label1 = tk.Label(
    image=logo_img,
    background=col1
    )
logo_label1.grid(
    row=0,
    column=1,
    sticky="ne",
    pady=640
    )

style = ttk.Style()
style.configure(
    "CustomLabel.TLabel",
    background=col1,
    )

#UI labels
categLabel = tk.Label(
    window,
    bg=col6,
    fg=col3,
    text="Categories Selection",
    font=('arial', 10, 'bold'),
    borderwidth=8,
    highlightbackground=col3,
    highlightthickness=1
    )
categLabel.grid(
    row=0,
    padx=12,
    pady=30,
    sticky="nw"
    )

resuLabel = tk.Label(
    window,
    bg=col6,
    fg=col3,
    text="Result View",
    font=('arial', 10, 'bold'),
    borderwidth=8,
    highlightbackground=col3,
    highlightthickness=1    
    )
resuLabel.grid(
    row=0,
    column=1,
    padx=20,
    pady=30,
    sticky="nw"
    )


#Create a scrollable frame
scrollable_frame = ttk.Frame(
    window,
    height=10
    )
scrollable_frame.grid(
    column=0,
    row=0,
    rowspan=len(categories),
    padx=12,
    pady=60,
    sticky="nsew"
    )

#Create a canvas to hold the scrollable frame
canvas = tk.Canvas(
    scrollable_frame,
    background=col1,
    width=400,
    height=800,
    highlightthickness=0
    )
scrollbar = ttk.Scrollbar(
    scrollable_frame,
    cursor='hand2',
    orient="vertical",
    command=canvas.yview
    )
scrollable_frame.grid_columnconfigure(
    0,
    weight=1
    )

#Associate the scrollbar with the canvas
canvas.configure(
    scrollregion=(0, 0, 400, 1800),
    yscrollcommand=scrollbar.set
    )

#Mouse scrolling
canvas.bind(
    '<MouseWheel>',
    lambda event: canvas.yview_scroll(int(event.delta/80),
    "units")
    )

#Pack the scrollbar and canvas
scrollbar.grid(
    column=1,
    row=0,
    sticky="ns"
    )
canvas.grid(
    column=0,
    row=0,
    sticky="nw"
    )

#Create a frame inside the canvas to hold categories
inner_frame = ttk.Frame(
    canvas,
    style='CustomLabel.TLabel'
    )
canvas.create_window((0, 0),
    window=inner_frame,
    anchor="nw"
    )

#Create interactive choices
choices = {}

for row, (category,
    options) in enumerate(categories.items(),
    start=1):
    ttk.Label(
    inner_frame,
    text=category,
    background=col1,
    foreground=col3,
    font=('arial', 10, 'bold')
    ).grid(
    row=row,
    column=0,
    padx=12,
    pady=1,
    sticky="w"
    )
    choice_var = tk.StringVar()
    choice_var.set("random")
    choice = ttk.Combobox(
    inner_frame,
    values=["random", "none"] + options['random'],
    textvariable=choice_var
    )
    choice.grid(
    row=row,
    column=1,
    padx=16,
    pady=2,
    )
    choices[category] = choice_var

#Create "Generate Prompt" button
generate_button = tk.Button(
    window,
    text="Generate Prompt",
    font=('arial', 13, 'bold'),
    height=2,
    width=20,
    command=generate_prompt,
    bg=col1,
    fg=col2,
    activebackground=col2,
    activeforeground=col3,
    highlightbackground=col3,
    highlightcolor=col2,
    highlightthickness=2,
    cursor='hand2'
    )
generate_button.grid(
    row=0,
    rowspan=2,
    column=1,
    padx=160,
    pady=380,
    sticky="ne",
    )

#Create "copy to clipboard" button
copy_button = tk.Button(
    window,
    background=col1,
    foreground=col3,
    activebackground=col5,
    activeforeground=col3,
    highlightbackground=col1,
    highlightcolor=col3,
    highlightthickness=2,
    cursor='hand2',
    border=2,
    font=('arial', 12, 'bold'),
    height=2,
    width=12,
    text="Copy Prompt",
    command=copy_to_clipboard,
    )
copy_button.grid(
    row=0,
    rowspan=2,
    column=1,
    padx=20,
    pady=380,
    sticky="ne"
    )

#Create result text
result_text = tk.StringVar()
result_text_widget = tk.Text(
    window,
    wrap=tk.WORD,
    height=18,
    width=65
    )
result_text_widget.grid(
    row=0,
    column=1,
    rowspan=len(categories),
    padx=20,
    pady=60,
    sticky="ne"
    )
